#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EPAM_Task7
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Task7_DB")]
	public partial class SessionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCredit(Credit instance);
    partial void UpdateCredit(Credit instance);
    partial void DeleteCredit(Credit instance);
    partial void InsertCreditResult(CreditResult instance);
    partial void UpdateCreditResult(CreditResult instance);
    partial void DeleteCreditResult(CreditResult instance);
    partial void InsertDiscipline(Discipline instance);
    partial void UpdateDiscipline(Discipline instance);
    partial void DeleteDiscipline(Discipline instance);
    partial void InsertExam(Exam instance);
    partial void UpdateExam(Exam instance);
    partial void DeleteExam(Exam instance);
    partial void InsertExaminer(Examiner instance);
    partial void UpdateExaminer(Examiner instance);
    partial void DeleteExaminer(Examiner instance);
    partial void InsertExamResult(ExamResult instance);
    partial void UpdateExamResult(ExamResult instance);
    partial void DeleteExamResult(ExamResult instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    partial void InsertSpecialty(Specialty instance);
    partial void UpdateSpecialty(Specialty instance);
    partial void DeleteSpecialty(Specialty instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    #endregion
		
		public SessionDataContext() : 
				base(global::EPAM_Task7.Properties.Settings.Default.Task7_DBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SessionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SessionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SessionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SessionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Credit> Credits
		{
			get
			{
				return this.GetTable<Credit>();
			}
		}
		
		public System.Data.Linq.Table<CreditResult> CreditResults
		{
			get
			{
				return this.GetTable<CreditResult>();
			}
		}
		
		public System.Data.Linq.Table<Discipline> Disciplines
		{
			get
			{
				return this.GetTable<Discipline>();
			}
		}
		
		public System.Data.Linq.Table<Exam> Exams
		{
			get
			{
				return this.GetTable<Exam>();
			}
		}
		
		public System.Data.Linq.Table<Examiner> Examiners
		{
			get
			{
				return this.GetTable<Examiner>();
			}
		}
		
		public System.Data.Linq.Table<ExamResult> ExamResults
		{
			get
			{
				return this.GetTable<ExamResult>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
		
		public System.Data.Linq.Table<Specialty> Specialties
		{
			get
			{
				return this.GetTable<Specialty>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Credit")]
	public partial class Credit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _SessionID;
		
		private System.Nullable<int> _DisciplineID;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _ExaminerID;
		
		private EntitySet<CreditResult> _CreditResults;
		
		private EntityRef<Discipline> _Discipline;
		
		private EntityRef<Examiner> _Examiner;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSessionIDChanging(System.Nullable<int> value);
    partial void OnSessionIDChanged();
    partial void OnDisciplineIDChanging(System.Nullable<int> value);
    partial void OnDisciplineIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnExaminerIDChanging(System.Nullable<int> value);
    partial void OnExaminerIDChanged();
    #endregion
		
		public Credit()
		{
			this._CreditResults = new EntitySet<CreditResult>(new Action<CreditResult>(this.attach_CreditResults), new Action<CreditResult>(this.detach_CreditResults));
			this._Discipline = default(EntityRef<Discipline>);
			this._Examiner = default(EntityRef<Examiner>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="Int")]
		public System.Nullable<int> SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisciplineID", DbType="Int")]
		public System.Nullable<int> DisciplineID
		{
			get
			{
				return this._DisciplineID;
			}
			set
			{
				if ((this._DisciplineID != value))
				{
					if (this._Discipline.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisciplineIDChanging(value);
					this.SendPropertyChanging();
					this._DisciplineID = value;
					this.SendPropertyChanged("DisciplineID");
					this.OnDisciplineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaminerID", DbType="Int")]
		public System.Nullable<int> ExaminerID
		{
			get
			{
				return this._ExaminerID;
			}
			set
			{
				if ((this._ExaminerID != value))
				{
					if (this._Examiner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExaminerIDChanging(value);
					this.SendPropertyChanging();
					this._ExaminerID = value;
					this.SendPropertyChanged("ExaminerID");
					this.OnExaminerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Credit_CreditResult", Storage="_CreditResults", ThisKey="ID", OtherKey="CreditID")]
		public EntitySet<CreditResult> CreditResults
		{
			get
			{
				return this._CreditResults;
			}
			set
			{
				this._CreditResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discipline_Credit", Storage="_Discipline", ThisKey="DisciplineID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Discipline Discipline
		{
			get
			{
				return this._Discipline.Entity;
			}
			set
			{
				Discipline previousValue = this._Discipline.Entity;
				if (((previousValue != value) 
							|| (this._Discipline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discipline.Entity = null;
						previousValue.Credits.Remove(this);
					}
					this._Discipline.Entity = value;
					if ((value != null))
					{
						value.Credits.Add(this);
						this._DisciplineID = value.ID;
					}
					else
					{
						this._DisciplineID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Discipline");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examiner_Credit", Storage="_Examiner", ThisKey="ExaminerID", OtherKey="ID", IsForeignKey=true)]
		public Examiner Examiner
		{
			get
			{
				return this._Examiner.Entity;
			}
			set
			{
				Examiner previousValue = this._Examiner.Entity;
				if (((previousValue != value) 
							|| (this._Examiner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Examiner.Entity = null;
						previousValue.Credits.Remove(this);
					}
					this._Examiner.Entity = value;
					if ((value != null))
					{
						value.Credits.Add(this);
						this._ExaminerID = value.ID;
					}
					else
					{
						this._ExaminerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Examiner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Credit", Storage="_Session", ThisKey="SessionID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Credits.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Credits.Add(this);
						this._SessionID = value.ID;
					}
					else
					{
						this._SessionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CreditResults(CreditResult entity)
		{
			this.SendPropertyChanging();
			entity.Credit = this;
		}
		
		private void detach_CreditResults(CreditResult entity)
		{
			this.SendPropertyChanging();
			entity.Credit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CreditResult")]
	public partial class CreditResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _StudentID;
		
		private System.Nullable<int> _CreditID;
		
		private bool _Result;
		
		private EntityRef<Credit> _Credit;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudentIDChanging(System.Nullable<int> value);
    partial void OnStudentIDChanged();
    partial void OnCreditIDChanging(System.Nullable<int> value);
    partial void OnCreditIDChanged();
    partial void OnResultChanging(bool value);
    partial void OnResultChanged();
    #endregion
		
		public CreditResult()
		{
			this._Credit = default(EntityRef<Credit>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int")]
		public System.Nullable<int> StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreditID", DbType="Int")]
		public System.Nullable<int> CreditID
		{
			get
			{
				return this._CreditID;
			}
			set
			{
				if ((this._CreditID != value))
				{
					if (this._Credit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreditIDChanging(value);
					this.SendPropertyChanging();
					this._CreditID = value;
					this.SendPropertyChanged("CreditID");
					this.OnCreditIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="Bit NOT NULL")]
		public bool Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Credit_CreditResult", Storage="_Credit", ThisKey="CreditID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Credit Credit
		{
			get
			{
				return this._Credit.Entity;
			}
			set
			{
				Credit previousValue = this._Credit.Entity;
				if (((previousValue != value) 
							|| (this._Credit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Credit.Entity = null;
						previousValue.CreditResults.Remove(this);
					}
					this._Credit.Entity = value;
					if ((value != null))
					{
						value.CreditResults.Add(this);
						this._CreditID = value.ID;
					}
					else
					{
						this._CreditID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Credit");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_CreditResult", Storage="_Student", ThisKey="StudentID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.CreditResults.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.CreditResults.Add(this);
						this._StudentID = value.ID;
					}
					else
					{
						this._StudentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Discipline")]
	public partial class Discipline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Credit> _Credits;
		
		private EntitySet<Exam> _Exams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Discipline()
		{
			this._Credits = new EntitySet<Credit>(new Action<Credit>(this.attach_Credits), new Action<Credit>(this.detach_Credits));
			this._Exams = new EntitySet<Exam>(new Action<Exam>(this.attach_Exams), new Action<Exam>(this.detach_Exams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discipline_Credit", Storage="_Credits", ThisKey="ID", OtherKey="DisciplineID")]
		public EntitySet<Credit> Credits
		{
			get
			{
				return this._Credits;
			}
			set
			{
				this._Credits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discipline_Exam", Storage="_Exams", ThisKey="ID", OtherKey="DisciplineID")]
		public EntitySet<Exam> Exams
		{
			get
			{
				return this._Exams;
			}
			set
			{
				this._Exams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Credits(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Discipline = this;
		}
		
		private void detach_Credits(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Discipline = null;
		}
		
		private void attach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Discipline = this;
		}
		
		private void detach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Discipline = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exam")]
	public partial class Exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _SessionID;
		
		private System.Nullable<int> _DisciplineID;
		
		private System.DateTime _Date;
		
		private System.Nullable<int> _ExaminerID;
		
		private EntitySet<ExamResult> _ExamResults;
		
		private EntityRef<Discipline> _Discipline;
		
		private EntityRef<Examiner> _Examiner;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSessionIDChanging(System.Nullable<int> value);
    partial void OnSessionIDChanged();
    partial void OnDisciplineIDChanging(System.Nullable<int> value);
    partial void OnDisciplineIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnExaminerIDChanging(System.Nullable<int> value);
    partial void OnExaminerIDChanged();
    #endregion
		
		public Exam()
		{
			this._ExamResults = new EntitySet<ExamResult>(new Action<ExamResult>(this.attach_ExamResults), new Action<ExamResult>(this.detach_ExamResults));
			this._Discipline = default(EntityRef<Discipline>);
			this._Examiner = default(EntityRef<Examiner>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", DbType="Int")]
		public System.Nullable<int> SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisciplineID", DbType="Int")]
		public System.Nullable<int> DisciplineID
		{
			get
			{
				return this._DisciplineID;
			}
			set
			{
				if ((this._DisciplineID != value))
				{
					if (this._Discipline.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDisciplineIDChanging(value);
					this.SendPropertyChanging();
					this._DisciplineID = value;
					this.SendPropertyChanged("DisciplineID");
					this.OnDisciplineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExaminerID", DbType="Int")]
		public System.Nullable<int> ExaminerID
		{
			get
			{
				return this._ExaminerID;
			}
			set
			{
				if ((this._ExaminerID != value))
				{
					if (this._Examiner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExaminerIDChanging(value);
					this.SendPropertyChanging();
					this._ExaminerID = value;
					this.SendPropertyChanged("ExaminerID");
					this.OnExaminerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamResult", Storage="_ExamResults", ThisKey="ID", OtherKey="ExamID")]
		public EntitySet<ExamResult> ExamResults
		{
			get
			{
				return this._ExamResults;
			}
			set
			{
				this._ExamResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Discipline_Exam", Storage="_Discipline", ThisKey="DisciplineID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Discipline Discipline
		{
			get
			{
				return this._Discipline.Entity;
			}
			set
			{
				Discipline previousValue = this._Discipline.Entity;
				if (((previousValue != value) 
							|| (this._Discipline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Discipline.Entity = null;
						previousValue.Exams.Remove(this);
					}
					this._Discipline.Entity = value;
					if ((value != null))
					{
						value.Exams.Add(this);
						this._DisciplineID = value.ID;
					}
					else
					{
						this._DisciplineID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Discipline");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examiner_Exam", Storage="_Examiner", ThisKey="ExaminerID", OtherKey="ID", IsForeignKey=true)]
		public Examiner Examiner
		{
			get
			{
				return this._Examiner.Entity;
			}
			set
			{
				Examiner previousValue = this._Examiner.Entity;
				if (((previousValue != value) 
							|| (this._Examiner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Examiner.Entity = null;
						previousValue.Exams.Remove(this);
					}
					this._Examiner.Entity = value;
					if ((value != null))
					{
						value.Exams.Add(this);
						this._ExaminerID = value.ID;
					}
					else
					{
						this._ExaminerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Examiner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Exam", Storage="_Session", ThisKey="SessionID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Exams.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Exams.Add(this);
						this._SessionID = value.ID;
					}
					else
					{
						this._SessionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamResults(ExamResult entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_ExamResults(ExamResult entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Examiner")]
	public partial class Examiner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FullName;
		
		private EntitySet<Credit> _Credits;
		
		private EntitySet<Exam> _Exams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    #endregion
		
		public Examiner()
		{
			this._Credits = new EntitySet<Credit>(new Action<Credit>(this.attach_Credits), new Action<Credit>(this.detach_Credits));
			this._Exams = new EntitySet<Exam>(new Action<Exam>(this.attach_Exams), new Action<Exam>(this.detach_Exams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examiner_Credit", Storage="_Credits", ThisKey="ID", OtherKey="ExaminerID")]
		public EntitySet<Credit> Credits
		{
			get
			{
				return this._Credits;
			}
			set
			{
				this._Credits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examiner_Exam", Storage="_Exams", ThisKey="ID", OtherKey="ExaminerID")]
		public EntitySet<Exam> Exams
		{
			get
			{
				return this._Exams;
			}
			set
			{
				this._Exams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Credits(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Examiner = this;
		}
		
		private void detach_Credits(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Examiner = null;
		}
		
		private void attach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Examiner = this;
		}
		
		private void detach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Examiner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamResult")]
	public partial class ExamResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _StudentID;
		
		private System.Nullable<int> _ExamID;
		
		private int _Result;
		
		private EntityRef<Exam> _Exam;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStudentIDChanging(System.Nullable<int> value);
    partial void OnStudentIDChanged();
    partial void OnExamIDChanging(System.Nullable<int> value);
    partial void OnExamIDChanged();
    partial void OnResultChanging(int value);
    partial void OnResultChanged();
    #endregion
		
		public ExamResult()
		{
			this._Exam = default(EntityRef<Exam>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="Int")]
		public System.Nullable<int> StudentID
		{
			get
			{
				return this._StudentID;
			}
			set
			{
				if ((this._StudentID != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIDChanging(value);
					this.SendPropertyChanging();
					this._StudentID = value;
					this.SendPropertyChanged("StudentID");
					this.OnStudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamID", DbType="Int")]
		public System.Nullable<int> ExamID
		{
			get
			{
				return this._ExamID;
			}
			set
			{
				if ((this._ExamID != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamIDChanging(value);
					this.SendPropertyChanging();
					this._ExamID = value;
					this.SendPropertyChanged("ExamID");
					this.OnExamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="Int NOT NULL")]
		public int Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_ExamResult", Storage="_Exam", ThisKey="ExamID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.ExamResults.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.ExamResults.Add(this);
						this._ExamID = value.ID;
					}
					else
					{
						this._ExamID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ExamResult", Storage="_Student", ThisKey="StudentID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.ExamResults.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.ExamResults.Add(this);
						this._StudentID = value.ID;
					}
					else
					{
						this._StudentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _SpecialtyID;
		
		private EntitySet<Session> _Sessions;
		
		private EntitySet<Student> _Students;
		
		private EntityRef<Specialty> _Specialty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSpecialtyIDChanging(System.Nullable<int> value);
    partial void OnSpecialtyIDChanged();
    #endregion
		
		public Group()
		{
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._Specialty = default(EntityRef<Specialty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialtyID", DbType="Int")]
		public System.Nullable<int> SpecialtyID
		{
			get
			{
				return this._SpecialtyID;
			}
			set
			{
				if ((this._SpecialtyID != value))
				{
					if (this._Specialty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialtyIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialtyID = value;
					this.SendPropertyChanged("SpecialtyID");
					this.OnSpecialtyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Session", Storage="_Sessions", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Student", Storage="_Students", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialty_Group", Storage="_Specialty", ThisKey="SpecialtyID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Specialty Specialty
		{
			get
			{
				return this._Specialty.Entity;
			}
			set
			{
				Specialty previousValue = this._Specialty.Entity;
				if (((previousValue != value) 
							|| (this._Specialty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specialty.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Specialty.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._SpecialtyID = value.ID;
					}
					else
					{
						this._SpecialtyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Specialty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Session")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _GroupID;
		
		private int _SesmesterNumber;
		
		private EntitySet<Credit> _Credits;
		
		private EntitySet<Exam> _Exams;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnSesmesterNumberChanging(int value);
    partial void OnSesmesterNumberChanged();
    #endregion
		
		public Session()
		{
			this._Credits = new EntitySet<Credit>(new Action<Credit>(this.attach_Credits), new Action<Credit>(this.detach_Credits));
			this._Exams = new EntitySet<Exam>(new Action<Exam>(this.attach_Exams), new Action<Exam>(this.detach_Exams));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SesmesterNumber", DbType="Int NOT NULL")]
		public int SemesterNumber
		{
			get
			{
				return this._SesmesterNumber;
			}
			set
			{
				if ((this._SesmesterNumber != value))
				{
					this.OnSesmesterNumberChanging(value);
					this.SendPropertyChanging();
					this._SesmesterNumber = value;
					this.SendPropertyChanged("SesmesterNumber");
					this.OnSesmesterNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Credit", Storage="_Credits", ThisKey="ID", OtherKey="SessionID")]
		public EntitySet<Credit> Credits
		{
			get
			{
				return this._Credits;
			}
			set
			{
				this._Credits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Exam", Storage="_Exams", ThisKey="ID", OtherKey="SessionID")]
		public EntitySet<Exam> Exams
		{
			get
			{
				return this._Exams;
			}
			set
			{
				this._Exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Session", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Credits(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Credits(Credit entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
		
		private void attach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Exams(Exam entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specialty")]
	public partial class Specialty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Group> _Groups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Specialty()
		{
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specialty_Group", Storage="_Groups", ThisKey="ID", OtherKey="SpecialtyID")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Specialty = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Specialty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FullName;
		
		private string _Gender;
		
		private System.DateTime _Birthdate;
		
		private System.Nullable<int> _GroupID;
		
		private EntitySet<CreditResult> _CreditResults;
		
		private EntitySet<ExamResult> _ExamResults;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnBirthdateChanging(System.DateTime value);
    partial void OnBirthdateChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    #endregion
		
		public Student()
		{
			this._CreditResults = new EntitySet<CreditResult>(new Action<CreditResult>(this.attach_CreditResults), new Action<CreditResult>(this.detach_CreditResults));
			this._ExamResults = new EntitySet<ExamResult>(new Action<ExamResult>(this.attach_ExamResults), new Action<ExamResult>(this.detach_ExamResults));
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthdate", DbType="Date NOT NULL")]
		public System.DateTime Birthdate
		{
			get
			{
				return this._Birthdate;
			}
			set
			{
				if ((this._Birthdate != value))
				{
					this.OnBirthdateChanging(value);
					this.SendPropertyChanging();
					this._Birthdate = value;
					this.SendPropertyChanged("Birthdate");
					this.OnBirthdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_CreditResult", Storage="_CreditResults", ThisKey="ID", OtherKey="StudentID")]
		public EntitySet<CreditResult> CreditResults
		{
			get
			{
				return this._CreditResults;
			}
			set
			{
				this._CreditResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ExamResult", Storage="_ExamResults", ThisKey="ID", OtherKey="StudentID")]
		public EntitySet<ExamResult> ExamResults
		{
			get
			{
				return this._ExamResults;
			}
			set
			{
				this._ExamResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Student", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CreditResults(CreditResult entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_CreditResults(CreditResult entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_ExamResults(ExamResult entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_ExamResults(ExamResult entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
}
#pragma warning restore 1591
